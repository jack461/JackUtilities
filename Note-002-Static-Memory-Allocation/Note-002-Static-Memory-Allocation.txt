[b]Introduction[/b]

Many JSFX algorithms and functions use arrays. In JS, you don't "declare" arrays, you have to "allocate" these arrays from a unique large memory area. In this part, I will describe a static memory allocator. By "static", I mean that blocks are allocated once for all (typically in the [b]@init[/b] section), and are never freed. So this schema is mainly intended for plug-ins that use permanent arrays for their algorithms.

Array allocation can be as simple as :
[code]buff1=0;
buff2=2000;[/code]
which allocates two arrays, the first starting at 0, the second starting at 2000. Here, you just decide which part of the memory you will be using for your arrays, taking care that arrays do not overlap. Note that the JSFX plug-ins memory is set to zero at initialization. 
However, for complex programs, this approach can be prone to errors - for example, in computing the next free address, changing the size of buffers, etc. So using a function is probably a better approach, like this version of "malloc" (in its shortest, unsafe form). 
[code]freemem = 0; // allocate starting at 0 -- a different value can be used.
function malloc(size) ((freemem += size) - size);
buffsize = 2000;
buff1=malloc(buffsize);
buff2=malloc(buffsize);[/code]

[b]A more elaborate allocator[/b]

After using such a version for a few developments, I found I needed a more elaborate schema. Two years ago, I introduced in my memory allocation the concept of "m-block", or "memory block". An m-block is just a block of memory surrounded by a header and a trailer. The header is two words long, and contains the [i]type[/i] and the [i]size[/i] of the block. The "type" is a 4 characters constant, like [b]'data'[/b], [b]'code'[/b], etc. The "size" is the length of the inner part, without the header and the trailer. The trailer is also two words long, and contains the [i]size[/i] and the [i]~type[/i] of the block - this notation, "~type" represents the JS value "0x7FFFFFFF~type". Such a block of data surrounded with control fields is sometimes called a "chunk". 
The memory layout of such a block is therefore:
[code][ type | size | word0 | word1 | ... | last_word | size | ~type ][/code]
Finally, note that all allocated blocks are continuous in memory, constituing a sequence of blocks, sequence which is itself surrounded by specific one word length begin and end markers.
While this organization implies an overhead of four words for each allocated block, note that all blocks are contiguous in memory, so blocks control words act implicitely as a double chained list. We'll see later that such a construct helps debugging and manipulating arrays as first class citizen. For the record, in a programming language an item is a "first class citizen" if:
[list]
[*]it can be passed as a parameter to a function
[*]it can be returned as a result of a function
[*]it can can be assigned to a variable
[*]it can be inserted in an array or a structure
[*]it can be tested for equality
[*]it can be dynamically created at run-time (this is a bonus, but not an imperative condition)
[*]its nature (type and some other properties) can be checked (this again is a bonus, and more an aspect of [i]introspection[/i], but it's nice to have that)
[/list]
[b]Defined operations[/b]

The defined operations are the following:
[list]
[*][b]mSL_StM_Init(address)[/b]: define the memory location of the first word to be allocated for the memory allocation. [b]mSL_StM_Init()[/b] starts allocating at address 0.
[*][b]mSL_StM_Alloc(size,type,flags)[/b]: allocate a new memory block, of size "size", of type "type", according to a set of "flags". The parameter "flags" is an additive combination of the following values:
[list]
[*][b]mSL_StM_FlClear[/b]: clear block contents once allocated
[*][b]mSL_StM_FlAlign[/b]: allocate inside a 64k boundary (useful for arrays used with functions like [b]mdct[/b], [b]fft[/b], etc.)
[/list] 
[*][b]mSL_StM_Check(address)[/b]: check the validity of the memory block at "address". [b]mSL_StM_Check()[/b] checks the whole static memory.
[/list]
Note that the result of an allocation is the address of "word0", so the algorithms which request memory do not have to worry about the header and the trailer. But, if "add" is the address of a memory block a program gets from a mSL_StM_Alloc call, the program can use add[-1] to get the size of the block, and add[-2] to get its type. We can consider that such arrays are now effective "first class citizen" according to our criteria, since, just using their reference (the memory address of the first word), we can know their type and their size.

[b]Using the allocator[/b]

In the REAPER Folder (the one you get by the menu "Options > Show REAPER resource path in explorer/finder..."), locate the subfolder "Effects". In this subfolder, create a new folder, that you will name "JackUtilities". Get the file "mSL_StM_Memory.jsfx-inc" from my [url=https://github.com/jack461/JackUtilities/tree/main/Note-002-Static-Memory-Allocation]github Note-002[/url], and install it in "JackUtilities". 

Import the file in your JSFX plug-in with "import JackUtilities/mSL_StM_Memory.jsfx-inc", and in the "@init" section, initialize the manager by "mSL_StM_Init()" to start the allocation at the first word of the memory, or by "mSL_StM_Init(100)" to start at address 100, etc.

[b]Debugging[/b]

This organization has been adopted to simplify the debugging of new codes. Most errors linked to arrays involve writing in memory before the start of the array, or after its last element. The control words help checking the correctness of a block, or crawling the whole chain of allocated blocks. The redondency between the header and the trailer makes it easy to discover programming errors.

Also, some additional flags (third parameter of a mSL_StM_Alloc call) may help debugging:
[list]
[*][b]mSL_StM_FlFill[/b]: fill the new block with random garbage. This helps detecting an algorithm implicitely relying on the block being set to zero after allocation.
[*][b]mSL_StM_FlSigErr[/b]: signal errors to the user, using the "#dbg_desc" feature.
[*][b]mSL_StM_FlCheck[/b]: check the whole memory before allocation
[/list] 
You can also set the [b]mSL_StM_GlobFlgs[/b] variable to a combination of some "mSL_StM_Flxxxx" flags, and it will be used in the mSL_StM_Alloc function. For exemple, set [b]mSL_StM_GlobFlgs=mSL_StM_FlFill+mSL_StM_FlSigErr+mSL_StM_FlCheck;[/b] during the tests, then [b]mSL_StM_GlobFlgs=0;[/b] when all bugs have been eliminated :).

Another error involves using an undefined array reference (typing for exemple "talbe" instead of "table"). In this case, the program is likely to write data at address 0 or followings. Then again, starting the allocation at address 0 can help discovering such cases. Another approach is to put in the first words of the memory specific values, and check from time to time that they are not modified. An appropriate place to do so is every second, in the "@block" or the "@gfx" sections. This is a combination of both tests:
[code]@init
0[0] = wordZeroV = 0x7215400011; // an arbitrary unlikely to be used value
MemInit(8);
@block
blockStartT=time();
(blockStartT != blockPrevT) ? (
    blockPrevT = blockStartT;
    (mSL_StM_Check() || (0[0] != wordZeroV)) ? (
        ... // do something
    );
);[/code]

All the best !

J. Jack.

Get text and code in my [url=https://github.com/jack461/JackUtilities/tree/main/Note-002-Static-Memory-Allocation]JackUtilities github Note-002[/url].

[b]TL;DR summary:[/b] a description of a quite basic, but possibily useful, static memory allocator.
