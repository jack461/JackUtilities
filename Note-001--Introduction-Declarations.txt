[b]Introduction[/b]

I intend to discuss here things related to "advanced" JSFX programming, like arrays, tables, memory and memory allocation, strings, objects, switch construct, and certainely a few other things. I will also point out things that I consider as "bad" designs in eel2/JSFX, and in some cases provide solutions to some shortcomings of the language.

[b]What's wrong with JSFX ?[/b]

I have been mainly programming in JSFX these last three years, and I have spent a lot of time wondering if I should not switch to another language such as C.
JSFX is quite usable, but it is far from beeing perfect. And to use it efficiently, you have to understand well its possibilities and its shortcomings.

I take the following example from Justin Frankel himself, in his [i]super8 looper[/i]:

[code]
function setstate_for_rec(rec, state) (
  // ugly cruft
  rec = (rec-mem_stlist)/st_num;
  rec == 0 ? ch1.setstate(state) :
  rec == 1 ? ch2.setstate(state) :
  rec == 2 ? ch3.setstate(state) :
  rec == 3 ? ch4.setstate(state) :
  rec == 4 ? ch5.setstate(state) :
  rec == 5 ? ch6.setstate(state) :
  rec == 6 ? ch7.setstate(state) :
  rec == 7 ? ch8.setstate(state);
);
[/code]
Don't get me wrong.

I won't say that this code is ugly. In fact, it is the best that you can do. However, it reveals two features lacking in JSFX : arrays of "objects", and a switch/case instruction. I do tend to consider that you can't do much work with "objects" in JSFX as they are implemented, and that most of the time you can use a different and more efficient approach. On the other hand, I often found that I missed a switch construct. 

The switch/case construct can be implemented with (or compiled as) a succession of conditionals, but when the tested value is an element in a dense sequence of integers, like in this case (all values from 0 to 7), most compilers can provide a much efficient code.

So JSFX has pros and cons, I will try in this thread to discuss them, and possibly explain some of the tricks I use to get around them.

I will start with the aspect of declarations.

[b]Declarations[/b]

My main problem with JSFX have always been the declations, and more specifically, the lack of them.

Although I have been programming for a lot of years, I'm not a good typist. I make typos, and if I spell wrong a variable name, there is almost no help from the system to discover that. My "new" created variable has just a value of zero, and that's it. But any algorithm that uses "this" variable is now probably incorrect.

So my first request about JSFX would be [i]Provide an [b]option[/b] (like: [b]options:declare_variables[/b]) to make variables declations mandatory, with a keyword such as [b]variable[/b], [b]var[/b], [b]dcl[/b], [b]define[/b], [b]def[/b], or even [b]ISolemnlyDeclareIWantToUseTheFollowingVariables[/b].[/i] So, [b]var toto=2;[/b] would be accepted if the option is not set, and would be mandatory if the option is set.

Currently, a solution is to use the REAPER integrated editor that shows to the right of its screen the list of used variables, and look for variables that are used only once, and therefore are likely to be typos, or at least unused variables. A nice feature, in this editor, would be to be able to sort the list of variables by the number of time they are used, which would simplify this task, but this is unfortunately not implemented.

As of variables, I have yet to understand why such a deprecated feature as the case insensivity of variables names is kept in JSFX -- but i can manage that.

Note also that variables not "declared" (i.e. "introduced" by a statement like [b]toto=0;[/b]) in the [b]@init[/b] section are local to the section where they are used. So, you need to check that [b]toto[/b] that you set in your [b]@block[/b] section and use in your [b]@gfx[/b] section is also declared in your [b]@init[/b] section.

I must admit that I have no solution to the problem of wrong spelled variables. A few hints:

- when a sub algorithm of your application uses a set of global variables, use the same significative prefix for them, so they are alphabetically grouped, and it is easy to see them all at once, at run time, in the integrated editor debugger.

- "declare" all variables you use at the beginning of the [b]@init[/b] section, in alphabetical order.

- verify frequently that you do not have variables used only once, and if so, check why.

- for large applications use an external modern editor (I use [i]VSCode[/i], and declare [b].jsfx[/b] and [b].jsfx-inc[/b] files to be of type "javascript", so syntax enlightening is almost correct).

- and, also, [i]know your basics in computer science, and read more than once the JSFX documentation[/i] !

Have you already bumped on this problem, and how did you manage it ? Have you some suggestion ?

All the best !

J. Jack.

[b]TL;DR summary:[/b] for now, a user of JSFX is just complaining about the state of things :-)
