[b]Introduction[/b]

I will discuss here some aspects of the numbers in JSFX.
There exists a single data type in the language, the double-precision floating point numbers (see the [url=https://en.wikipedia.org/wiki/Double-precision_floating-point_format]Wikipedia entry[/url]).

I summarize here a few properties of these numbers:
[list]
[*]They are represented on 64 bits, according to the IEEE 754 standard. They have 1 bit sign, 11 bits exponent, and 52 bits mantissa.
[*]They can represent very large and very small positive and negative numbers, between 10^âˆ’308 and 10^308, and are quite appropriate to represent audio samples.
[*]They can also represent [i]exactly[/i] integers, in the range -2^53 to 2^53. Lets call that the [i]integers range[/i].
[*]They have a precision of about 18 decimal digits.
[/list]
While the representation of variables is always 64 bits floating point, instructions exist in JSFX to convert to integers, apply bit fields operations, etc. Integers constitute a subset of the representable 64 bits floating points numbers. Some significative integers are:
[list]
[*]2^15-1: 32767, the greatest positive number that can be represented on 16 bits.
[*]2^16: 65536, the number of integers that can be represented on 16 bits.
[*]2^31-1: 2147483647, the greatest positive number that can be represented on 32 bits.
[*]2^32: 4294967296, the number of integers that can be represented on 32 bits.
[*]2^48: 281474976710656, the number of integers that can be represented on 48 bits.
[*]2^53: 9007199254740992, the higher limit of the dense range of integers that can be represented with double-precision floating point numbers.
[/list]
Integers beyond 2^53 can be represented, but the set of these numbers is not dense, i.e. doesn't contain all consecutive integers. For example, beyond 2^53, you can represent 9007199254740994, 9007199254740996, etc., but not 9007199254740993 or 9007199254740995. I will call [b]integer range[/b] the range [b][-2^53 2^53][/b].

It seems that we have all we need to be happy. However, things are not so simple, and it is important to consult both the details of [url=http://reaper.fm/sdk/js/basiccode.php]JSFX operations[/url], and the description of the [url=https://en.wikipedia.org/wiki/IEEE_754]IEEE 754 Standard for Floating-Point Arithmetic[/url]). The JSFX operators [b]%[/b], [b]<<[/b], [b]>>[/b], [b]|[/b], [b]&[/b], [b]~[/b] first convert their operands to integers, do their work, then convert the result to a 64 bits float. For this reason, while integers in the range -2^53 to 2^53 are exactly represented, you may sometimes be able to manipulate only integers in the -2^31 to 2^31 range. Let examine the various operations.

[b]The [i]|[/i], [i]&[/i] and [i]~[/i] operators[/b]

These operators appear to work correctly on operands in the -2^53 to 2^53 range. Beyond that, the limitation of the representation of integers appears: [b]9007199254740992 | 1[/b] returns [b]9007199254740992[/b] while we expect [b]9007199254740993[/b],but so does [b]9007199254740992 + 1[/b]. So, in the [i]integers range[/i], the idiom [b]0|N[/b] to get the integer part of a number is correct - but so is [b]floor(N)[/b].

[b]The [i]%[/i] operator[/b].

The operation [b]A%B[/b] (A modulo B) returns the [i]remainder[/i] of the integer division of A by B. It works correctly in the [i]integers range[/i]. If you need the integer [i]quotient[/i] of the division of A by B, use [b]0|A/B[/b].

[b]The [i]>>[/i] and [i]<<[/i] operators[/b]

They convert their left operand to a 32 bit integer before doing the shift. Their results are incorrect for operands outside the 32 bit range: [b]4294967295 << 1[/b] returns [b]-2[/b], [b]10995111627775 >> 1[/b] returns [b]2147483647[/b], which is 2^31-1. As a workaround, for a large integer N, [b]N << p[/b] can be computed as [b]N * 2^p[/b], which gives the correct answer, and [b]N >> p[/b] can be computed as [b]0|(N / 2^p)[/b].

To pack a few bytes in a number, do not use [i]>>[/i] and [i]<<[/i], but write some function like this one, which packs 6 bytes in the [0 255] range:
[code]function pack6(b1, b2, b3, b4, b5, b6)
(
    b6 + b5*2^8 + b4*2^16 + b3*2^24 + b2*2^32 + b1*2^40;
);[/code]
Tale provided an excellent solution for the unpacking function:
[code]function unpack6(N, tab)
(
    N = 0|N;
    tab[0] = (N / 2^40) & 0xFF;
    tab[1] = (N / 2^32) & 0xFF;
    tab[2] = (N / 2^24) & 0xFF;
    tab[3] = (N / 2^16) & 0xFF;
    tab[4] = (N / 2^8 ) & 0xFF;
    tab[5] =  N         & 0xFF;
    tab;
);[/code]
In this case, the first parameter is the result of the packing of 6 bytes, the second is an array of 6 elements that will receive the various bytes. The function has the added interest that is shows how to extract a specific byte from such a packed word.

Note that 6 bytes is the maximum we can pack, since 7 bytes would require 56 bits of precision, while we have only 53.
Similar functions can be written to pack and unpack up to 53 bits. This is left as an exercice to the reader.

[b]Notations[/b]

The hexadecimal notation 0x... appears to be stable up to 2^53. After that, chaos rules... For example, [b]0xfffffffffffffffff[/b] is interpreted as [b]18446744073709551616[/b], while it should be [b]295147905179352825855[/b]... or at least [b]295147905179352825856[/b] (then again, rounding to the nearest representable integer). The decimal notation has not this problem, and seems to be correctly intepreted, of course in the limit of the 18 decimal digit precision. In some cases, we really miss an exponential notation, such as 1e-20 or 2.4E30, like people knew how to implement in the nineteen sixties. 

However, note that the compiler performs [i]constant folding[/i], which means that subexpressions involving only constants are computed at compile time. So, expressions like 2^32, 10^10, etc, are computed once for all, and do not involve any computation at execution time.

[b]Converting to integers[/b]

We have seen the [b]0|N[/b] expression, providing a [i]round toward zero[/i] conversion. However, two nice functions exist, that provide alternate options: [b]floor(N)[/b], which gives the larger integer not greater that its parameter, whatever the sign of N is, and [b]ceil(N)[/b], which gives the smallest integer not less that its parameter. By comparison, [b]0|N[/b] is equivalent to [b]floor(N)[/b] for N positive or null, and [b]ceil(N)[/b] for N negative. Finally, a [b]round(N)[/b] operation is sometimes proposed in programming languages, which rounds to the nearest integer. In JSFX, you can define it as:[code]function round(N) (0|(N+sign(N)*0.5));[/code]

[b]The [i]==[/i] and [i]!=[/i] operators[/b].

In JSFX, the [b]==[/b] operator has a very specific definition: [b]A==B[/b] returns 1 if [b]abs(A-B)<10^-5[/b] (the dual operation is similar: [b]A!=B[/b] returns 0 if [b]abs(A-b)<10^-5[/b]). So, [b]A==B[/b] uses an [i]absolute comparison tolerence[/i] of 10^-5. This definition is quite convenient for handling values in a [-1 1] range like audio signals (10^-5 is around -17dB), since float calculations may introduce very small imprecisions in their results. Note also that the [b]===[/b] operator (and its dual [b]!==[/b]) provide an exact comparison of numbers.

However, some algorithms may require comparisons of very large or very small values. For A and B around 10^12 or more, it is unlikely that [b]A==B[/b] if A and B are not identical. Likewise, for A and B around 10^-5, [b]A==B[/b] is almost always true. Even in audio handling, you may need for some algorithms a better precision than 10^-5.

In these cases, a [i]relative comparison tolerence[/i] might be better, and a function like this one may be useful:
[code]
default_comparison_tolerence = 10^-5; // standard
function equal(A, B, tolerence) ((A===B) || (abs(A-B)/(abs(A)+abs(B))<tolerence));
function equal(A, B) (equal(A, B, default_comparison_tolerence));
[/code]
Note that the case A===0, B===0 which would generate a divide by zero error is handled by the test A===B executed first. The default comparison tolerence would typically be between 10^-3 and 10^-12. For a value of 1 or greater, all numbers are considered equal!

Finally, note also that the [b]>=[/b] and [b]<=[/b] operations do [i]not[/i] internally use this definition of [i]==[/i], but [i]===[/i]. So, after A=10; B=A+10^-6;, A==B is true, but A>=B is false. Then again, if you need a permissive comparison, use something like [b](A==B)||(A>B)[/b] rather than [b]A>=B[/b].

[b]So...[/b]
We could go on for pages and pages, but this is probably a good part of the things to know about integers and floating point numbers and operations in the current (September 2022) state of the art of JSFX.

All the best.

J. Jack.

Get text and code in my [url=https://github.com/jack461/JackUtilities/tree/main/Note-003-Numbers-Properties]JackUtilities github Note-003[/url].

[i]Thanks to Tale for its solution about the "unpack6" function.[/i]

[b]TL;DR summary:[/b] discussion about float and integers in JSFX, with some caveat :-)
