desc:JJ-Test-JSFX-03
/*

     Just a few expressions that let check what operators do...
*/


@init

n01 = 2147483648;
n02 = 0|n01;
n03 = 5222222222.7777;
n04 = 0|n03;

n05 = 256 * 256 * 256 * 256 * 2;
n06 = 0|n05;

n07 = 1000 * 1000 * 1000 * 1000 + 0.1;
n08 = 0|n07;
n09 = 1|n07;

n10 = 1000 * 1000;
n11 = n10 + 0.0000001;

n12 = 1000 * 1000;
n13 = n12 + 0.0000001;
n14a = n12 == n13;
n14b = n12 >= n13;
n14c = n12 > n13;
n14d = n12 < n13;
n14e = n12 <= n13;

n15 = ( 1000 * 1000 * 1000 * 1000 * 100) + 0xAC;
n15a = n15 > 2^53;
n15b = n15 | 3;
n16 = ( 1000 * 1000 * 1000 * 1000 * 100) + 0xCA;
n16a = n15 | n16;
n16b = n15 & n16;

n17 =  ( 1000 * 1000 * 1000 * 1000 * 1000 * 10) + 0xAC;
n17b = n17 | 3;
n17a = n17 > 2^53;
n18 =  ( 1000 * 1000 * 1000 * 1000 * 1000 * 10) + 0xCA;
n19 = n17 | n18 ;
n20 = n17 & n18;

n21 = 9007199254740992;
n22 = n21 | 1;
n23 = n21 + 1;

n60 = 0xffffff;
n61 = 0xf0f0f0 & n60;
n62 = 0x0f0f0f & n60;
n63 = n61 | n62;
n64 = n60 << 1;
n65 = n60 % 100000000;
n66 = n60 >> 1;

n70 = 0xfffffff;
n71 = 0xf0f0f0f & n70;
n72 = 0x0f0f0f0 & n70;
n73 = n71 | n72;
n74 = n70 << 1;
n75 = n70 % 100000000;
n76 = n70 >> 1;

n80 = 0xffffffff;
n81 = 0xf0f0f0f0 & n80;
n82 = 0x0f0f0f0f & n80;
n83 = n81 | n82;
n84 = n80 << 1;                        // Alas !
n85 = n80 % 100000000;
n86 = n80 >> 1;
n87 = n80 * 2;
n88 = 0|(n80/2);

n90 = 0xfffffffff;
n91 = 0xf0f0f0f0f & n90;
n92 = 0x0f0f0f0f0 & n90;
n93 = n91 | n92;
n94 = n90 << 1;
n95 = n90 % 100000000;
n96 = n90 >> 1;
n97 = n90 * 2;
n98 = 0|(n90/2);

n100 = 0xffffffffff;
n101 = 0xf0f0f0f0f0 & n100;
n102 = 0x0f0f0f0f0f & n100;
n103 = n101 | n102;
n104 = n100 << 1;
n105 = n100 % 100000000;
n106 = n100 >> 1;

n110 = 0xfffffffffff;
n111 = 0xf0f0f0f0f0f & n110;
n112 = 0x0f0f0f0f0f0 & n110;
n113 = n111 | n112;
n114 = n110 << 1;
n115 = n110 % 100000000;
n116 = n110 >> 1;

n120 = 0xffffffffffff;
n121 = 0xf0f0f0f0f0f0 & n120;
n122 = 0x0f0f0f0f0f0f & n120;
n123 = n121 | n122;
n124 = n120 << 1;
n125 = n120 % 100000000;
n126 = n120 >> 1;


n130 = 0xfffffffffffff;
n131 = 0xf0f0f0f0f0f0f & n130;
n132 = 0x0f0f0f0f0f0f0 & n130;
n133 = n131 | n132;                    // OK
n134 = n130 << 1;
n135 = n130 % 100000000;
n136 = n130 >> 1;

n140 = 0x1fffffffffffff;
n141 = 0x1f0f0f0f0f0f0f & n140;
n142 = 0x10f0f0f0f0f0f0 & n140;
n143 = n141 | n142;                    // OK
n144 = n140 << 1;
n145 = n140 % 100000000;

n150 = 0x3fffffffffffff;               // beyond the 2^53 limit...
n151 = 0x3f0f0f0f0f0f0f & n150;
n152 = 0x30f0f0f0f0f0f0 & n150;
n153 = n151 | n152;
n154 = 0|n150;
n155 = 0x3ffffffffffffe;

n200 = 0xffffffffffffff;               // ....
n201 = 0xfffffffffffffc;
n202 = 0|n200;
n203 = 4|n200;
n205 = 1 & n200;

n210 = 0xfffffffffffffff;
n211 = 0xffffffffffffff0;

n214 = 0xffffffffff;
n215 = 0xfffffffffff;
n216 = 0xffffffffffff;
n217 = 0xfffffffffffff;
n218 = 0xffffffffffffff;
n218a = n217 * 16 + 15;
n219 = 0xfffffffffffffff;
n219a = n218a * 16 + 15;
n220 = 0xffffffffffffffff;          
n220a = n219a * 16 + 15;
n221 = 0xfffffffffffffffff;           // now, wtf algorithm do they use ?
n221a = n220a * 16 + 15;
n222 = 0xffffffffffffffffff;
n223 = 0xfffffffffffffffffff;
n224 = 0xffffffffffffffffffff;

n250 = 100000000;
n251 = 1000000000;
n252 = 10000000000;
n253 = 100000000000;
n254 = 1000000000000;
n255 = 10000000000000;
n256 = 100000000000000;
n257 = 1000000000000000;
n258 = 10000000000000000;
n259 = 100000000000000000;
n260 = 1000000000000000000;
n261 = 10000000000000000000;
n262 = 100000000000000000000;
n263 = 1000000000000000000000;
n264 = 10000000000000000000000;
n265 = 100000000000000000000000;
n266 = 1000000000000000000000000;
n267 = 10000000000000000000000000;
n268 = 100000000000000000000000000;
n269 = 1000000000000000000000000000;
n270 = 10000000000000000000000000000;
n271 = 100000000000000000000000000000;
n272 = 1000000000000000000000000000000;
n272a = n272 / n271;
n280 = 1000000000000000000000000000000000000000000;
n281 = 10000000000000000000000000000000000000000000;
n281a = n281/n280;

/*
 aaa=2;
 aab=3;
aac = 5;
aad = 8;
aae = 13;
*/
zzz = __dbg_getstackptr();
function xyz(w)
(
    __dbg_getstackptr();
);
zzz2 =  xyz(125);

// exec2("1+1;", 0);


function XOR(A,B)
local (i, bit, R)
(
    R=i=0; bit=1;
    loop(64,
        (A & bit) !== (B & bit) ? R += bit;
        bit *= 2;
    );
    R;
);

//
n300 = 0xADFE36B1;
//
n301 = 0x75AF5789;

n300 = 0xADFE36B12F8923;
n301 = 0x75AF57893E7425;
n302 = n300 ~ n301;

n303 = XOR(n300, n301);
n302a = n302  ~ n301;
n303a = XOR(n303, n301);
n304 = n300 > 2^53;
n305m = 0x75A5793A8241;
n305q = n300/n305m;
n305 = ((0|n305q)*n305m) + n300 % n305m;

n400 = 1624.16789;
n401 = 1624.86789;
n402 = -1624.16789;
n403 = -1624.86789;

n400f = floor(n400);
n400c = ceil(n400);
n400i = 0|n400;
n400r = 0|(n400+sign(n400)*0.5);

n401f = floor(n401);
n401c = ceil(n401);
n401i = 0|n401;
n401r = 0|(n401+sign(n401)*0.5);

n402f = floor(n402);
n402c = ceil(n402);
n402i = 0|n402;
n402r = 0|(n402+sign(n402)*0.5);

n403f = floor(n403);
n403c = ceil(n403);
n403i = 0|n403;
n403r = 0|(n403+sign(n403)*0.5);

function round(N) (0|(N+sign(N)*0.5));


// Pack bytes in the [0 .. 255] range
function pack6(b1, b2, b3, b4, b5, b6)
(
    b6 + b5*2^8 + b4*2^16 + b3*2^24 + b2*2^32 + b1*2^40;
);

n501 = 138;
n502 = 66;
n503 = 255;
n504 = 0;
n505 = 93;
n506 = 11;

n509 = pack6(N501, n502, n503, n504, n505, n506);

table = 100; // where to unpack

function unpack6(N, tab)
local (i, t, k, p)
(
    N = 0|N;
    i=0; t=40; loop(6,
        p = 2^t;
        tab[i] = k = 0 | (N / p); N = N - k * p;
        i += 1; t -= 8;
    );
    tab;
);

unpack6(n509, table);

n510 = table[0];
n511 = table[1];
n512 = table[2];
n513 = table[3];
n514 = table[4];
n515 = table[5];
